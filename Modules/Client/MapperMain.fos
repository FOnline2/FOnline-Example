// FOS Mapper
// Author: Tawaruuk

//****************************************************************************************************************************** Module initialization
void ModuleInit()
{
	__EventStart.Subscribe( OnStart );
	__EventRenderIface.Subscribe( OnRenderIface );
    __EventInspectorProperties.Subscribe(OnInspectorProperties );
}

//****************************************************************************************************************************** Called on mapper loaded
void OnStart()
{
	Config::InitializeGame();
	LoadFont(5, "mapper");
	SetDefaultFont(5, 0xFFCCCCCC);

    hash[] pids = {};
	int tab;

	tab = TAB_FAST_ITEMS;
	TabDelete(tab);
	TabSetName(tab, "MAP");
	pids.clear();
    pids.insertLast(Content::Item::Block                );
    pids.insertLast(Content::Item::BlockLight           );
    pids.insertLast(Content::Item::Entrance             );
    pids.insertLast(Content::Item::ExitGrid             );
    pids.insertLast(Content::Item::Light                );
    pids.insertLast(Content::Item::MinimapInvisibleBlock);
    pids.insertLast(Content::Item::ScrollBlock          );
    pids.insertLast(Content::Item::Trigger              );
    pids.insertLast(Content::Item::WallLight            );
    TabSetItemPids(tab, "Special", pids);

	TabSetName(TAB_TILES, "FLR");
	TabSetTileDirs(TAB_TILES, array<string> = {"Art/Floors/"}, array<bool> = {true});

	TabSetName(TAB_CRITTERS, "CRT");
}

//****************************************************************************************************************************** Interface render
// You can use Draw* functions only there.
// Layer specification (rev 605):
//    0
// Game map
//    1
// Mapper interface
//    2
// Console, MessageBox
//    3
// Mapper object interface
//    4
// Cursor
//    5
void OnRenderIface( uint layer )
{
	if( layer == 4 )
	{
        // Zoom text
        DrawText( "" + int(1.0f/__SpritesZoom*100.0f+0.5f) + "%", 870, 10, 100, 20, COLOR_WHITE, 7, 0 );
    }
}

//****************************************************************************************************************************** Inspector properties
void OnInspectorProperties( Entity entity, int[] properties )
{
    int[] newProperties = {};

    // Items
    Item item  = cast< Item >( entity );
    if( item !is null ) {
        newProperties.insertLast( ItemProperty::Type );
        newProperties.insertLast( ItemProperty::HexX );
        newProperties.insertLast( ItemProperty::HexY );
        newProperties.insertLast( 0 );
        newProperties.insertLast( ItemProperty::PicMap  );
        newProperties.insertLast( ItemProperty::OffsetX );
        newProperties.insertLast( ItemProperty::OffsetY );
        newProperties.insertLast( 0 );
        newProperties.insertLast( ItemProperty::BlockLines );
        newProperties.insertLast( 0 );
        newProperties.insertLast( ItemProperty::ScriptId );

        if( item.IsLight )
        {
            newProperties.insertLast( 0 );
            newProperties.insertLast( ItemProperty::LightIntensity );
            newProperties.insertLast( ItemProperty::LightDistance  );
            newProperties.insertLast( ItemProperty::LightFlags     );
            newProperties.insertLast( ItemProperty::LightColor     );
        }
    }

    // Critters ?? Не работает в 789
    // Critter cr = cast< Critter >( entity );
    // if( cr !is null ){
        // newProperties.insertLast( CritterProperty::HexX );
        // newProperties.insertLast( CritterProperty::HexY );
        // newProperties.insertLast( CritterProperty::Dir  );
        // newProperties.insertLast( 0 );
        // newProperties.insertLast( CritterProperty::ScriptId );
        // newProperties.insertLast( CritterProperty::DialogId );
        // newProperties.insertLast( CritterProperty::TeamId   );
        // newProperties.insertLast( CritterProperty::NpcRole  );
        // newProperties.insertLast( CritterProperty::ReplicationTime );

    // }

    properties.set( newProperties );
}